 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();


if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}
var shortUrlNumber = 1000;

var urls = {1000:'http://www.google.com'};

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })


app.get('/new/*', function(req,res){

  if(req.params[0]) {
    urls[shortUrlNumber++] = req.params[0];
    
    var response = {};
    response['shortUrl'] = 'https://brick-board.glitch.me/' + shortUrlNumber;
    response['originalUrl'] = urls[shortUrlNumber];
      
    shortUrlNumber++;
    
    res.send(response);
  }
  else{
    res.send('Please enter a valid url');
  } 
});

app.get('/*', function(req,res){
  if(req.params[0] && urls.hasOwnProperty(req.params[0])) {

    var redirectUrl = urls[req.params[0]];
    res.redirect(redirectUrl);
  }
  else{
    res.send('No url found for: '+req.params[0]);
  }
});
  




// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

